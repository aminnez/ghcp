name: Build and Release Native Binaries

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v1.0.0)"
        required: false
        default: "latest"

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_NAME: ghcp
  EXECUTABLE_NAME: ghcp

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            arch: x64
            runner: macos-13
            target: x86_64-apple-darwin
          - os: macos
            arch: arm64
            runner: macos-14
            target: aarch64-apple-darwin
          - os: linux
            arch: x64
            runner: ubuntu-20.04
            target: x86_64-linux-gnu
          - os: linux
            arch: arm64
            runner: ubuntu-20.04
            target: aarch64-linux-gnu
            cross-compile: true
          - os: windows
            arch: x64
            runner: windows-2022
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.7.1
        with:
          sdk: stable

      - name: Cache pub packages
        uses: actions/cache@v4.3.0
        with:
          path: |
            ~/.pub-cache
            ~\AppData\Local\Pub\Cache
          key: ${{ runner.os }}-${{ matrix.arch }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-pub-
            ${{ runner.os }}-pub-

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.cross-compile == true
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: dart pub get

      - name: Compile to native executable
        shell: bash
        run: |
          mkdir -p release-artifacts/${{ matrix.os }}-${{ matrix.arch }}
          COMPILE_ARGS=""
          if [ "${{ matrix.cross-compile }}" = "true" ]; then
            COMPILE_ARGS="--target-os linux"
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi
          if [ "${{ matrix.os }}" = "windows" ]; then
            dart compile exe bin/${{ env.EXECUTABLE_NAME }}.dart \
              -o release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }}.exe \
              $COMPILE_ARGS
          else
            dart compile exe bin/${{ env.EXECUTABLE_NAME }}.dart \
              -o release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }} \
              $COMPILE_ARGS
            chmod +x release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }}
          fi

      - name: Verify executable
        if: matrix.cross-compile != true
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            ./release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }}.exe --help
          else
            ./release-artifacts/${{ matrix.os }}-${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }} --help
          fi

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [ "$VERSION" = "$GITHUB_REF" ] || [ -z "$VERSION" ]; then
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Package executable
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          cd release-artifacts/${{ matrix.os }}-${{ matrix.arch }}
          if [ "${{ matrix.os }}" = "windows" ]; then
            7z a ../${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip ${{ env.EXECUTABLE_NAME }}.exe
          else
            tar -czf ../${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ env.EXECUTABLE_NAME }}
          fi
          cd ../..

      - name: Generate checksums
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          cd release-artifacts
          if [ "${{ matrix.os }}" = "windows" ]; then
            sha256sum ${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip > ${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.sha256
          else
            sha256sum ${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz > ${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.sha256
          fi
          cd ..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-artifact
          path: |
            release-artifacts/*.tar.gz
            release-artifacts/*.zip
            release-artifacts/*.sha256
          retention-days: 7
          compression-level: 0
      - name: Build Summary with Artifact Links
        if: always() # Run even if some steps fail
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "### üèó Build Artifacts for $VERSION" >> $GITHUB_STEP_SUMMARY

          for f in release-artifacts/*.tar.gz release-artifacts/*.zip release-artifacts/*.sha256; do
            if [ -f "$f" ]; then
              echo "- [$f](https://github.com/${GITHUB_REPOSITORY}/suites/${GITHUB_RUN_ID}/artifacts/${{ matrix.os }}-${{ matrix.arch }})" >> $GITHUB_STEP_SUMMARY
            fi
          done

  release:
    name: Create Release and Upload Assets
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
          merge-multiple: true

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} release-assets/ \;
          ls -lah release-assets/

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [ "$VERSION" = "$GITHUB_REF" ] || [ -z "$VERSION" ]; then
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ contains(github.ref, '-') }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## üöÄ Release ${{ steps.get_version.outputs.version }}

            ### üì¶ Download Binaries

            | Platform | Architecture | File |
            |----------|--------------|------|
            | macOS | x64 (Intel) | `${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-macos-x64.tar.gz` |
            | macOS | arm64 (Apple Silicon) | `${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-macos-arm64.tar.gz` |
            | Linux | x64 | `${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-linux-x64.tar.gz` |
            | Linux | arm64 | `${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-linux-arm64.tar.gz` |
            | Windows | x64 | `${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-windows-x64.zip` |

            ### üìù Installation

            **macOS/Linux:**
            ```bash
            # Extract the archive
            tar -xzf ${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-<platform>-<arch>.tar.gz

            # Make executable
            chmod +x ${{ env.EXECUTABLE_NAME }}

            # Move to PATH (optional)
            sudo mv ${{ env.EXECUTABLE_NAME }} /usr/local/bin/
            ```

            **Windows:**
            ```powershell
            # Extract the zip file and add to PATH or run directly
            ```

            ### üîê Verify Download

            SHA256 checksums are provided for each binary:
            ```bash
            sha256sum -c ${{ env.PROJECT_NAME }}-${{ steps.get_version.outputs.version }}-<platform>-<arch>.sha256
            ```
          draft: false
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          files: release-assets/*
          fail_on_unmatched_files: true
          generate_release_notes: true
